
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 16 01:05:44 2015

@author: zanderl
"""

import os
import numpy as np
import pandas as pd
from pandas import DataFrame
import matplotlib.pyplot as plt
import statsmodels.api as sm
import statsmodels as st
import seaborn as sb
import datetime
import pandas.io.data
sb.set_style('darkgrid')


#path = pd.io.data.get_data_yahoo('%5EGSPC',
                                  #start = datetime.datetime(1950, 1, 3),
                                    #end = datetime.datetime(2015, 7, 15))
#path.to_csv('stock_data')
path = pd.read_csv('stock_data', parse_dates = 'Date', index_col = 'Date')


#stock_data = pd.read_csv(path)
stock_data = path
#print(stock_data)
#print(stock_data.head())


#Plot Closing price
#stock_data['Close'].plot(figsize=(16, 12))

#Create first difference to attempt to make data stationary
stock_data['First Difference'] = stock_data['Close'] - stock_data['Close'].shift()
stock_data['Second Difference'] = stock_data['Close'] - stock_data['Close'].shift(2)
#stock_data['First Difference'].plot(figsize=(16, 12))

#Apply log transform to the data to fix issues with data exponentially
#increasing over time which makes it difficult to see
#variations in earlier observations

stock_data['Natural Log'] = stock_data['Close'].apply(lambda x: np.log(x))
#stock_data['Natural Log'].plot(figsize=(16, 12))

stock_data['Original Variance'] = pd.rolling_var(stock_data['Close'], 30, min_periods=None, freq=None, center=True)
stock_data['Log Variance'] = pd.rolling_var(stock_data['Natural Log'], 30, min_periods=None, freq=None, center=True)

#Plot the above variance calculations
fig, ax = plt.subplots(2, 1, figsize=(13,12))
stock_data['Original Variance'].plot(ax=ax[0], title='Original Variance')
stock_data['Log Variance'].plot(ax=ax[1], title='Log Variance')
fig.tight_layout()


stock_data['Logged First Difference'] = stock_data['Natural Log'] - stock_data['Natural Log'].shift()
#stock_data['Logged First Difference'].plot(figsize=(16, 12))

stock_data['Lag 1'] = stock_data['Logged First Difference'].shift()
stock_data['Lag 2'] = stock_data['Logged First Difference'].shift(2)
stock_data['Lag 5'] = stock_data['Logged First Difference'].shift(5)
stock_data['Lag 30'] = stock_data['Logged First Difference'].shift(30)
stock_data['Lag 50'] = stock_data['Logged First Difference'].shift(50)
stock_data['Lag 100'] = stock_data['Logged First Difference'].shift(100)
stock_data['Lag 200'] = stock_data['Logged First Difference'].shift(200)
stock_data['Lag 252'] = stock_data['Logged First Difference'].shift(252)

#Plot scatter plot for comparison of distributions of lagged variables and original variables
#sb.jointplot('Logged First Difference', 'Lag 1', stock_data, kind='reg', size=13)

from statsmodels.tsa.stattools import acf
from statsmodels.tsa.stattools import pacf

lag_correlations = acf(stock_data['Logged First Difference'].iloc[1:])
lag_partial_correlations = pacf(stock_data['Logged First Difference'].iloc[1:])

#fig, ax = plt.subplots(figsize=(16,12))
#ax.plot(lag_correlations, marker='o', linestyle='--')


from statsmodels.tsa.seasonal import seasonal_decompose

#decomposition = seasonal_decompose(stock_data['Natural Log'], model='additive', freq=30)
#fig = plt.figure()
#fig = decomposition.plot()


#ARIMA model fitting to data
#model = sm.tsa.ARIMA(stock_data['Natural Log'].iloc[1:], order=(1, 0, 0))
#results = model.fit(disp=-5)
#stock_data['Forecast'] = results.fittedvalues
#stock_data[['Natural Log', 'Forecast']].plot(figsize=(16, 12))


#ARIMA model fitted to first difference logged data series
model = sm.tsa.ARIMA(stock_data['Logged First Difference'].iloc[1:], order=(1, 0, 0))
results = model.fit(disp=-1)
stock_data['Forecast'] = results.fittedvalues
#stock_data[['Logged First Difference', 'Forecast']].plot(figsize=(16, 12))
#stock_data[['Logged First Difference', 'Forecast']].iloc[1200:1600, :].plot(figsize=(16, 12))

#ARIMA exponential smoothing model fitted to first difference logged data series

model = sm.tsa.ARIMA(stock_data['Logged First Difference'].iloc[1:], order=(0, 0, 1))
results = model.fit(disp=-1)
stock_data['Forecast'] = results.fittedvalues
stock_data[['Logged First Difference', 'Forecast']].plot(figsize=(16, 12))
stock_data[['Logged First Difference', 'Forecast']].iloc[1200:1400, :].plot(figsize=(16, 12))
